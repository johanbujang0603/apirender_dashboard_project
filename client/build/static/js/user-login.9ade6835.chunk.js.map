{"version":3,"sources":["helpers/Validation.js","views/user/login.js"],"names":["validatePassword","value","error","length","validateEmail","test","connect","authUser","loading","loginError","isAuthenticated","message","loginUserAction","loginUser","history","email","useState","password","useEffect","console","log","NotificationManager","warning","initialValues","to","Row","className","xxs","md","Card","CardTitle","IntlMessages","id","onSubmit","values","errors","touched","FormGroup","Label","name","validate","type","Button","color","size"],"mappings":"mRACO,MAAMA,EAAoBC,IAC7B,IAAIC,EAMJ,OALKD,EAEMA,EAAME,OAAS,IACtBD,EAAQ,6CAFRA,EAAQ,6BAILA,GAGEE,EAAiBH,IAC1B,IAAIC,EAMJ,OALKD,EAEO,4CAA4CI,KAAKJ,KACzDC,EAAQ,yBAFRA,EAAQ,kCAILA,GC4HII,sBALS,IAAmB,IAAlB,SAAEC,GAAe,EACxC,MAAM,QAAEC,EAAF,WAAWC,EAAX,gBAAuBC,EAAvB,QAAwCC,GAAYJ,EAC1D,MAAO,CAAEC,UAASC,aAAYC,kBAAiBC,YAGT,CACtCC,gBAAiBC,KADJP,CAjID,IAOP,IAPQ,QACbQ,EADa,QAEbN,EAFa,WAGbC,EAHa,gBAIbC,EAJa,gBAKbE,EALa,QAMbD,GACI,EACJ,MAAOI,GAASC,mBAAS,KAClBC,GAAYD,mBAAS,IAE5BE,oBAAU,KACRC,QAAQC,IAAIT,IACX,CAACA,IAEJO,oBAAU,KACJT,GACFY,IAAoBC,QAClBb,EACA,cACA,IACA,KACA,KACA,KAGH,CAACA,IAEJ,MAQMc,EAAgB,CAAER,QAAOE,YAC/B,OAAIP,EAAwB,kBAAC,IAAD,CAAUc,GAAG,MAEvC,kBAACC,EAAA,EAAD,CAAKC,UAAU,SACb,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,mBAChC,kBAACG,EAAA,EAAD,CAAMH,UAAU,aACd,yBAAKA,UAAU,kCACf,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASF,GAAG,IAAIE,UAAU,SACxB,0BAAMA,UAAU,iBAElB,kBAACI,EAAA,EAAD,CAAWJ,UAAU,QACnB,kBAACK,EAAA,EAAD,CAAcC,GAAG,sBAGjBrB,GACA,uBAAGe,UAAU,gCAAgCf,GAG/C,kBAAC,IAAD,CAAQY,cAAeA,EAAeU,SA3B3BC,IACd1B,GACkB,KAAjB0B,EAAOnB,OAAoC,KAApBmB,EAAOjB,UAChCL,EAAgBsB,EAAQpB,KAyBjB,QAAC,OAAEqB,EAAF,QAAUC,GAAX,SACC,kBAAC,IAAD,CAAMV,UAAU,mCACd,kBAACW,EAAA,EAAD,CAAWX,UAAU,8BACnB,kBAACY,EAAA,EAAD,KACE,kBAACP,EAAA,EAAD,CAAcC,GAAG,gBAEnB,kBAAC,IAAD,CACEN,UAAU,eACVa,KAAK,QACLC,SAAUpC,IAEX+B,EAAOpB,OAASqB,EAAQrB,OACvB,yBAAKW,UAAU,4BACZS,EAAOpB,QAId,kBAACsB,EAAA,EAAD,CAAWX,UAAU,8BACnB,kBAACY,EAAA,EAAD,KACE,kBAACP,EAAA,EAAD,CAAcC,GAAG,mBAEnB,kBAAC,IAAD,CACEN,UAAU,eACVe,KAAK,WACLF,KAAK,WACLC,SAAUxC,IAEXmC,EAAOlB,UAAYmB,EAAQnB,UAC1B,yBAAKS,UAAU,4BACZS,EAAOlB,WAId,yBAAKS,UAAU,qDACb,kBAAC,IAAD,CAASF,GAAG,kBAAZ,2CAGA,kBAACkB,EAAA,EAAD,CACEC,MAAM,UACNjB,UAAS,wCACPlB,EAAU,eAAiB,IAE7BoC,KAAK,MAEL,0BAAMlB,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SACd,kBAACK,EAAA,EAAD,CAAcC,GAAG,yBAIvB,yBAAKN,UAAU,qDACb,kBAAC,IAAD,CAASF,GAAG,yBAAZ","file":"static/js/user-login.9ade6835.chunk.js","sourcesContent":["\r\nexport const validatePassword = (value) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Please enter your password';\r\n    } else if (value.length < 4) {\r\n        error = 'Password must be longer than 3 characters';\r\n    }\r\n    return error;\r\n};\r\n\r\nexport const validateEmail = (value) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Please enter your email address';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n    }\r\n    return error;\r\n};\r\n\r\nexport const validateName = (value) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Please enter your name';\r\n    } else if (value.length < 4) {\r\n        error = 'Name must be longer than 3 characters';\r\n    }\r\n    return error;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { NotificationManager } from \"../../components/common/react-notifications\";\r\n\r\nimport { loginUser } from \"../../redux/actions\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { validatePassword, validateEmail } from \"../../helpers/Validation\";\r\n\r\nconst Login = ({\r\n  history,\r\n  loading,\r\n  loginError,\r\n  isAuthenticated,\r\n  loginUserAction,\r\n  message\r\n}) => {\r\n  const [email] = useState(\"\");\r\n  const [password] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(message)\r\n  }, [message])\r\n\r\n  useEffect(() => {\r\n    if (loginError) {\r\n      NotificationManager.warning(\r\n        loginError,\r\n        \"Login Error\",\r\n        3000,\r\n        null,\r\n        null,\r\n        \"\"\r\n      );\r\n    }\r\n  }, [loginError]);\r\n\r\n  const onUserLogin = (values) => {\r\n    if (!loading) {\r\n      if (values.email !== \"\" && values.password !== \"\") {\r\n        loginUserAction(values, history);\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { email, password };\r\n  if (isAuthenticated) return <Redirect to=\"/\" />;\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \"></div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.login-title\" />\r\n            </CardTitle>\r\n\r\n            { message && (\r\n              <p className=\"text-small text-primary mb-5\">{message}</p>\r\n            ) }\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.email\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                      validate={validateEmail}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.email}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/register\">\r\n                      You don't have an account? Sign up now.\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? \"show-spinner\" : \"\"\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.login-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/forgot-password\">\r\n                      Foreget password?\r\n                    </NavLink>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, loginError, isAuthenticated, message } = authUser;\r\n  return { loading, loginError, isAuthenticated, message };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginUserAction: loginUser,\r\n})(Login);\r\n"],"sourceRoot":""}