{"version":3,"sources":["views/user/password-reset.js"],"names":["validationSchema","Yup","shape","password","min","required","confirmPassword","oneOf","connect","history","loading","params","useParams","className","xxs","md","to","initialValues","onSubmit","values","axios","post","userId","token","then","res","NotificationManager","success","data","push","catch","err","warning","response","errors","touched","id","type","name","color","size"],"mappings":"mIAAA,mKAYMA,EAAmBC,MAAaC,MAAM,CAC1CC,SAAUF,MACPG,IAAI,EAAG,0CACPC,SAAS,wBACZC,gBAAiBL,MACdM,MAAM,CAACN,IAAQ,YAAa,MAAO,wBACnCI,SAAS,kCAsHCG,sBAAQ,KAAM,GAAdA,EAnHO,SAAC,GAGhB,IAFLC,EAEI,EAFJA,QACAC,EACI,EADJA,QAEMC,EAASC,cA6Bf,OACE,kBAAC,IAAD,CAAKC,UAAU,SACb,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,mBAChC,kBAAC,IAAD,CAAMA,UAAU,aACd,yBAAKA,UAAU,kCAEf,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASG,GAAG,IAAIH,UAAU,SACxB,0BAAMA,UAAU,iBAElB,kBAAC,IAAD,CAAWA,UAAU,QAArB,kBAIA,kBAAC,IAAD,CAAQI,cAhBI,CAAEd,SAAU,GAAIG,gBAAiB,IAgBPN,iBAAkBA,EAAkBkB,SAzC5D,SAACC,GACvBC,IAAMC,KAAN,8BAAkCV,EAAOW,OAAzC,YAAmDX,EAAOY,OAAS,CAAEpB,SAAUgB,EAAOhB,WACrFqB,MAAK,SAACC,GACLC,IAAoBC,QAClBF,EAAIG,KACJ,0BACA,IACA,KACA,KACA,IAEFnB,EAAQoB,KAAK,kBAEdC,OAAM,SAACC,GACNL,IAAoBM,QAClBD,EAAIE,SAASL,KACb,QACA,IACA,KACA,KACA,UAsBO,gBAAGM,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAMtB,UAAU,mCACd,kBAAC,IAAD,CAAWA,UAAU,oCACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,GAAG,mBAGP,kBAAC,IAAD,CACEvB,UAAU,eACVwB,KAAK,WACLC,KAAK,aAENJ,EAAO/B,UAAYgC,EAAQhC,UAC1B,yBAAKU,UAAU,4BACZqB,EAAO/B,WAId,kBAAC,IAAD,CAAWU,UAAU,oCACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,GAAG,2BAGP,kBAAC,IAAD,CACEvB,UAAU,eACVwB,KAAK,WACLC,KAAK,oBAENJ,EAAO5B,iBAAmB6B,EAAQ7B,iBACjC,yBAAKO,UAAU,4BACZqB,EAAO5B,kBAId,yBAAKO,UAAU,qDACb,kBAAC,IAAD,CAASG,GAAG,eAAZ,aAGA,kBAAC,IAAD,CACEuB,MAAM,UACN1B,UAAS,wCACPH,EAAU,eAAiB,IAE7B8B,KAAK,MAEL,0BAAM3B,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SACd,kBAAC,IAAD,CAAcuB,GAAG","file":"static/js/password-reset.345886ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, \"Password must be at least 6 characters\")\r\n    .required(\"Password is required\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Confirm Password is required\"),\r\n});\r\n\r\nconst PasswordReset = ({\r\n  history,\r\n  loading\r\n}) => {\r\n  const params = useParams();\r\n\r\n  const onPasswordReset = (values) => {\r\n    axios.post(`/api/password-reset/${params.userId}/${params.token}`, { password: values.password })\r\n    .then((res) => {\r\n      NotificationManager.success(\r\n        res.data,\r\n        'Forgot Password Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      history.push('/user/login');\r\n    })\r\n    .catch((err) => {\r\n      NotificationManager.warning(\r\n        err.response.data,\r\n        'Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    })\r\n  };\r\n\r\n  const initialValues = { password: '', confirmPassword: '' };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              Password Reset\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onPasswordReset}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label  mb-4\">\r\n                    <Label>\r\n                      <IntlMessages\r\n                        id=\"user.password\"\r\n                      />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label  mb-4\">\r\n                    <Label>\r\n                      <IntlMessages\r\n                        id=\"user.confirm-password\"\r\n                      />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"confirmPassword\"\r\n                    />\r\n                    {errors.confirmPassword && touched.confirmPassword && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.confirmPassword}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/login\">\r\n                      Sign in ?\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.reset-password-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default connect(null, {})(PasswordReset);\r\n"],"sourceRoot":""}